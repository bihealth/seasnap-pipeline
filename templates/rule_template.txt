# this is a template for writing new pipeline rules,
# copy the template and replace or delete the marked parts.
# see documentation for more information

rule <rule_name>:
	""" <description of rule> """
	input:
		# an input file
		pph.file_path(step = "<input_rule>", extension = "<file_extension>", <additional wildcards>),
		
		# choose from different input files
		pph.choose_input(choice_name = "<choice_name>", options = [
		dict(step = "<input_rule_option1>", extension = "<file_extension>", <additional wildcards>),
		dict(step = "<input_rule_option2>", extension = "<file_extension>", <additional wildcards>)
		]),
		
		# get many input files, expanding over samples (mapping pipeline) or contrasts (DE pipeline);
		# to expand over something else use snakemakes expand() with pph.file_path()
		pph.expand_path(step = "input_rule>", extension = "<file_extension>", <additional wildcards>)
	output:
		pph.file_path(step = "<rule_name>", extension = "<file_extension>", <additional wildcards>)
	log:
		out = pph.file_path(step = "<rule_name>", extension = "output.log", log=True, <additional wildcards>)
	run:
		######## 1.) pre-compute, format
		
		#TODO: python code ...
		
		######## 2.) write script (variables are inserted at wildcard positions)
		
		script = textwrap.dedent(r"""
		
		#TODO: script code ...
		
		""")

		######## 3.) create log files, including the "script_file" with the script
		
		script_file = pph.log(log.out, snakemake_format(script), step="<rule_name>", extension="<e.g. R or sh>", **wildcards, <additional wildcards>)

		######## 4.) run the script with corresponding command
		
		# run R
		shell("Rscript --vanilla '{script_file}' &>> '{log.out}'")
		# or run shell script
		shell("bash '{script_file}' &>> '{log.out}'")
